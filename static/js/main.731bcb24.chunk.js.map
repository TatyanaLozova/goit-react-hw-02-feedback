{"version":3,"sources":["Components/FeedbackOptions.js","Components/Statistics.js","Components/Section.js","Components/Notification.js","App.js","reportWebVitals.js","index.js","Components/FeedbackOptions.module.css"],"names":["FeedbackOptions","options","onLeaveFeedback","className","s","btn","map","feedbac","button","type","name","onClick","Statistics","good","neutral","bad","total","positivePercentage","Section","title","children","Notification","message","App","state","countTotalFeedback","countPositiveFeedbackPercentage","result","percentage","Math","round","e","target","setState","prevState","this","objKey","Object","keys","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"oSAyBeA,EAnBS,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,gBAChC,OACI,mCACI,qBAAMC,UAAWC,IAAEC,IAAnB,SACCJ,EAAQK,KAAI,SAACC,GAAD,OACX,wBAAQJ,UAAWC,IAAEI,OAAuBC,KAAK,SAASC,KAAMH,EAASI,QAAST,EAAlF,SACOK,GAD4BA,WCWlCK,EAnBI,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,QAASC,EAAlB,EAAkBA,IAAKC,EAAvB,EAAuBA,MAAOC,EAA9B,EAA8BA,mBAA9B,OACb,gCACF,uCAAUJ,KACV,0CAAaC,KACb,sCAASC,KACT,wCAAWC,KACX,oDAAuBC,EAAvB,WCQWC,EAbC,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACtB,OACI,qCACI,6BAAKD,IACJC,MCCEC,EANM,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OAAiB,4BAAIA,KCKrBC,G,kNACpBC,MAAQ,CACPX,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGNU,mBAAqB,WAAO,IAAD,EACK,EAAKD,MAEpC,OAH0B,EAClBX,KADkB,EACZC,QADY,EACHC,K,EAKxBW,gCAAkC,WACjC,IAAMC,EAAS,EAAKF,qBAEdG,EAAqB,IADV,EAAKJ,MAAdX,KAC0Bc,EAClC,OAAOE,KAAKC,MAAMF,I,EAGnB1B,gBAAkB,SAAC6B,GAClB,IAAMrB,EAAOqB,EAAEC,OAAOtB,KACtB,EAAKuB,UAAS,SAACC,GAAD,sBACZxB,EAAOwB,EAAUxB,GAAQ,O,4CAG5B,WAAU,IAAD,EACuByB,KAAKX,MAA5BX,EADA,EACAA,KAAMC,EADN,EACMA,QAASC,EADf,EACeA,IACjBC,EAAQmB,KAAKV,qBACbR,EAAqBkB,KAAKT,kCAE1BU,EAASC,OAAOC,KAAKH,KAAKX,OAChC,OACC,qCACC,cAAC,EAAD,CAASL,MAAM,wBAAf,SACC,cAAC,EAAD,CAAiBlB,QAASmC,EAAQlC,gBAAiBiC,KAAKjC,oBAG9C,IAAVc,EACA,cAAC,EAAD,CAAcM,QAAQ,sBAEtB,cAAC,EAAD,CAASH,MAAM,aAAf,SACC,cAAC,EAAD,CACCN,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOA,EACPC,mBAAoBA,a,GA/CMsB,cCIlBC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K,kBCfAc,EAAOC,QAAU,CAAC,IAAM,6BAA6B,OAAS,mC","file":"static/js/main.731bcb24.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types'\r\nimport s from './FeedbackOptions.module.css'\r\n\r\n\r\n\r\nconst FeedbackOptions = ({ options, onLeaveFeedback }) => {\r\n    return (\r\n        <>\r\n            <div  className={s.btn}>\r\n            {options.map((feedbac) => (\r\n              <button className={s.button } key={feedbac} type=\"button\" name={feedbac} onClick={onLeaveFeedback}>\r\n                    {feedbac}\r\n                </button>                               \r\n            ))}\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nFeedbackOptions.propTypes = {\r\n\toptions: PropTypes.array.isRequired,\r\n\tonLeaveFeedback: PropTypes.func.isRequired\r\n};\r\n\r\nexport default FeedbackOptions;","import React from 'react';\r\nimport PropTypes from 'prop-types'\r\n\r\nconst Statistics = ({ good, neutral, bad, total, positivePercentage }) => (\r\n      <div>\r\n    <p>Good: {good}</p>\r\n    <p>Neutral: {neutral}</p>\r\n    <p>Bad: {bad}</p>\r\n    <p>Total: {total}</p>\r\n    <p>Positive feedback: {positivePercentage}%</p>\r\n  </div>\r\n);\r\n\r\n\r\nStatistics.propTypes = {\r\n  good: PropTypes.number.isRequired,\r\n  neutral: PropTypes.number.isRequired,\r\n  bad: PropTypes.number.isRequired,\r\n  total: PropTypes.number.isRequired,\r\n  positivePercentage: PropTypes.number.isRequired,\r\n};\r\n\r\nexport default Statistics;\r\n\r\n\r\n\r\n\r\n","  \r\nimport React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Section = ({ title, children }) => {\r\n    return (\r\n        <>\r\n            <h2>{title}</h2>\r\n            {children}\r\n        </>\r\n    );\r\n};\r\n\r\nSection.propTypes = {\r\n    title: PropTypes.string.isRequired\r\n};\r\n\r\nexport default Section;","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Notification = ({ message }) => <p>{message}</p>;\r\n\r\nNotification.propTypes = {\r\n  message: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Notification;","import React, { Component } from 'react';\nimport FeedbackOptions from './Components/FeedbackOptions';\nimport Statistics from './Components/Statistics';\nimport Section from './Components/Section';\nimport Notification from \"./Components/Notification\";\n\nimport './App.css';\n\nexport default class App extends Component {\n\tstate = {\n\t\tgood: 0,\n\t\tneutral: 0,\n\t\tbad: 0\n\t};\n\n\tcountTotalFeedback = () => {\n\t\tconst { good, neutral, bad } = this.state;\n\t\tconst result = good + neutral + bad;\n\t\treturn result;\n\t};\n\n\tcountPositiveFeedbackPercentage = () => {\n\t\tconst result = this.countTotalFeedback();\n\t\tconst { good } = this.state;\n\t\tconst percentage = (good * 100) / result;\n\t\treturn Math.round(percentage);\n\t};\n\n\tonLeaveFeedback = (e) => {\n\t\tconst name = e.target.name;\n\t\tthis.setState((prevState) => ({\n\t\t\t[name]: prevState[name] + 1\n\t\t}));\n\t};\n\trender() {\n\t\tconst { good, neutral, bad } = this.state;\n\t\tconst total = this.countTotalFeedback();\n\t\tconst positivePercentage = this.countPositiveFeedbackPercentage();\n\n\t\tconst objKey = Object.keys(this.state);\n\t\treturn (\n\t\t\t<>\n\t\t\t\t<Section title=\"Please leave feedback\">\n\t\t\t\t\t<FeedbackOptions options={objKey} onLeaveFeedback={this.onLeaveFeedback} />\n\t\t\t\t</Section>\n\n\t\t\t\t{total === 0 ? (\n\t\t\t\t\t<Notification message=\"No feedback given\" />\n\t\t\t\t) : (\n\t\t\t\t\t<Section title=\"Statistics\">\n\t\t\t\t\t\t<Statistics\n\t\t\t\t\t\t\tgood={good}\n\t\t\t\t\t\t\tneutral={neutral}\n\t\t\t\t\t\t\tbad={bad}\n\t\t\t\t\t\t\ttotal={total}\n\t\t\t\t\t\t\tpositivePercentage={positivePercentage}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Section>\n\t\t\t\t)}\n\t\t\t</>\n\t\t);\n\t}\n}\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"FeedbackOptions_btn__2iZnZ\",\"button\":\"FeedbackOptions_button__3QbX2\"};"],"sourceRoot":""}